name: Build and Publish Sneaker-GCI Docker Image

on:
  schedule:
  # * is a special character in YAML so you have to quote this string
  - cron:  '0 4 * * 6'

  push:
    branches: [master]
    
  workflow_dispatch:

jobs:
  Build-Sneaker-GCI-binaries:
    name: Build Sneaker-GCI binaries
    runs-on: ubuntu-latest
    steps:
        - name: Checkout repo
          uses: actions/checkout@v3

        - name: Setup Go stable
          uses: actions/setup-go@v4
          with:
            go-version: 'stable'

        - name: Setup Node 18
          uses: actions/setup-node@v3
          with:
            node-version: 18
            cache: 'npm'

        - name: Run the binary build
          run: ./build.sh

        - name: Save the artifacts for this Docker build
          uses: actions/upload-artifact@v3
          with:
            name: builds
            path: build/

  Build-and-push-Sneaker-Docker-image:
    name: Build Sneaker Docker image and push to repositories
    runs-on: ubuntu-latest
    steps:

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current date
        id: date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v4
        with:
          context: ./docker_src
          push: true
          tags: |
            aterfax/sneaker-webgci:latest 
            ghcr.io/aterfax/sneaker-webgci:latest
            aterfax/sneaker-webgci:${{ env.DATE }}
            ghcr.io/aterfax/sneaker-webgci:${{ env.DATE }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
